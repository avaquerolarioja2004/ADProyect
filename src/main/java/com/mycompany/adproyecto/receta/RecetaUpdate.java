/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.adproyecto.receta;

import com.mycompany.adproyecto.libroReceta.*;
import com.mycompany.adproyecto.Main;
import com.mycompany.adproyecto.libroReceta.IDAO.BinaryDAOLibroRecetas;
import com.mycompany.adproyecto.libroReceta.IDAO.BufferedDAOLibroRecetas;
import com.mycompany.adproyecto.libroReceta.IDAO.DOMDAOLibroRecetas;
import com.mycompany.adproyecto.libroReceta.IDAO.RADAOLibroRecetas;
import com.mycompany.adproyecto.libroReceta.IDAO.object.ObjectDAOLibroRecetas;
import com.mycompany.adproyecto.receta.IDAO.BinaryDAOReceta;
import com.mycompany.adproyecto.receta.IDAO.BufferedDAOReceta;
import com.mycompany.adproyecto.receta.IDAO.DOMDAOReceta;
import com.mycompany.adproyecto.receta.IDAO.RADAOReceta;
import com.mycompany.adproyecto.receta.IDAO.object.ObjectDAOReceta;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JOptionPane;

/**
 *
 * @author mrpox
 */
public class RecetaUpdate extends javax.swing.JFrame {

    private BufferedDAOReceta bR;
    private BinaryDAOReceta dR;
    private ObjectDAOReceta oR;
    private char typeData;
    private File file;
    private File fileLr;
    private RADAOReceta rR;
    private final SimpleDateFormat sdf;
    private BufferedDAOLibroRecetas bLR;
    private BinaryDAOLibroRecetas dLR;
    private ObjectDAOLibroRecetas oLR;
    private RADAOLibroRecetas rLR;
    private DOMDAOLibroRecetas domLR;
    private DOMDAOReceta domR;

    /**
     * Creates new form LibroRecetaUpdateç
     */
    public RecetaUpdate() {
        super("RECETA UPDATE");
        initComponents();
        this.setLocationRelativeTo(null);
        this.sdf = new SimpleDateFormat("dd/mm/yyyy", Locale.ENGLISH);
        this.sdf.setTimeZone(TimeZone.getTimeZone("Europe/Paris"));
        this.setResizable(false);
    }

    public void setTypeData(char typeData) {
        this.typeData = typeData;
    }

    public void setFile(File file) {
        this.file = file;
    }

    public void setFileLr(File file) {
        this.fileLr = file;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backButton = new javax.swing.JButton();
        textBusqueda = new javax.swing.JLabel();
        textId = new javax.swing.JTextField();
        textName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textISBNLibro = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        isVegana = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButton.setText("VOLVER");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        textBusqueda.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        textBusqueda.setText("ID del Libro a  Editar:");

        textName.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel2.setText("NOMBRE");

        jLabel3.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel3.setText("ISBN DEL LIBRO");

        textISBNLibro.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel4.setText("FECHA DE CREACIÓN");

        textDate.setToolTipText("");

        jLabel5.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel5.setText("VEGANA");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 0));
        jLabel6.setText("*");

        updateButton.setText("UPDATE");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textISBNLibro, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textBusqueda)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textId, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(207, 207, 207))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 281, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textDate)
                                    .addComponent(isVegana, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textId, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(textISBNLibro, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(textDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(isVegana, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        Main m = new Main();
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        LibroRecetas libroRAux = null;
        Receta recetaAux = null;
        Receta recetaIn = null;
        int id;
        if (textId.getText().length() < 1 || textName.getText().length() < 1) {
            JOptionPane.showMessageDialog(null, "ALGUN CAMPO REQUERIDO ES INCORRECTO",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!textId.getText().matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "SOLO SE ACEPTA VALOR NUMÉRICO EN EL CAMPO ID",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!textISBNLibro.getText().matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "SOLO SE ACEPTA VALOR NUMÉRICO EN EL CAMPO ID LIBRO",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        id = Integer.parseInt(textId.getText());

        switch (typeData) {
            case 'B' -> {
                bR = new BufferedDAOReceta(file.getAbsolutePath());
                bLR = new BufferedDAOLibroRecetas(fileLr.getAbsolutePath());
                
                if (!textISBNLibro.getText().isBlank()) {
                    libroRAux = bLR.consultaId(Integer.parseInt(textISBNLibro.getText()));
                    
                    if (libroRAux == null) {
                        JOptionPane.showMessageDialog(null, "EL ISBN DEL LIBRO NO SE HA ENCONTRADO",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                }
                recetaIn = bR.consultaId(id);
                if (recetaIn != null) {
                    recetaAux = putData(recetaAux);
                    if (bR.modificar(recetaIn, recetaAux)) {
                        JOptionPane.showMessageDialog(null, "ACTUALIZACIÓN DE LA RECETA CORRECTA",
                                "OK", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "ERROR EN LA ACTUALIZACIÓN",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "EL ID DE LA RECETA A ACTUALIZAR NO SE HA ENCONTRADO",
                            "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }

            }
            case 'D' -> {
                dR = new BinaryDAOReceta(file.getAbsolutePath());
                dLR = new BinaryDAOLibroRecetas(fileLr.getAbsolutePath());
                
                if (!textISBNLibro.getText().isBlank()) {
                    libroRAux = dLR.consultaId(Integer.parseInt(textISBNLibro.getText()));
                    
                    if (libroRAux == null) {
                        JOptionPane.showMessageDialog(null, "EL ISBN DEL LIBRO NO SE HA ENCONTRADO",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                }
                recetaIn = dR.consultaId(id);
                if (recetaIn != null) {
                    recetaAux = putData(recetaAux);
                    if (dR.modificar(recetaIn, recetaAux)) {
                        JOptionPane.showMessageDialog(null, "ACTUALIZACIÓN DE LA RECETA CORRECTA",
                                "OK", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "ERROR EN LA ACTUALIZACIÓN",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "EL ID DE LA RECETA A ACTUALIZAR NO SE HA ENCONTRADO",
                            "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            case 'O' -> {
                oR = new ObjectDAOReceta(file.getAbsolutePath());
                oLR = new ObjectDAOLibroRecetas(fileLr.getAbsolutePath());
                
                if (!textISBNLibro.getText().isBlank()) {
                    libroRAux = oLR.consultaId(Integer.parseInt(textISBNLibro.getText()));
                    
                    if (libroRAux == null) {
                        JOptionPane.showMessageDialog(null, "EL ISBN DEL LIBRO NO SE HA ENCONTRADO",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                }
                recetaIn = oR.consultaId(id);
                if (recetaIn != null) {
                    recetaAux = putData(recetaAux);
                    if (oR.modificar(recetaIn, recetaAux)) {
                        JOptionPane.showMessageDialog(null, "ACTUALIZACIÓN DE LA RECETA CORRECTA",
                                "OK", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "ERROR EN LA ACTUALIZACIÓN",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "EL ID DE LA RECETA A ACTUALIZAR NO SE HA ENCONTRADO",
                            "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            case 'R' -> {
                rR = new RADAOReceta(file.getAbsolutePath());
                rLR = new RADAOLibroRecetas(fileLr.getAbsolutePath());
                
                if (!textISBNLibro.getText().isBlank()) {
                    libroRAux = rLR.consultaId(Integer.parseInt(textISBNLibro.getText()));
                    
                    if (libroRAux == null) {
                        JOptionPane.showMessageDialog(null, "EL ISBN DEL LIBRO NO SE HA ENCONTRADO",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                }
                recetaIn = rR.consultaId(id);
                if (recetaIn != null) {
                    recetaAux = putData(recetaAux);
                    if (rR.modificar(recetaIn, recetaAux)) {
                        JOptionPane.showMessageDialog(null, "ACTUALIZACIÓN DE LA RECETA CORRECTA",
                                "OK", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "ERROR EN LA ACTUALIZACIÓN",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "EL ID DE LA RECETA A ACTUALIZAR NO SE HA ENCONTRADO",
                            "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            case 'X' -> {
                domR = new DOMDAOReceta(file.getAbsolutePath());
                domLR = new DOMDAOLibroRecetas(fileLr.getAbsolutePath());
                
                if (!textISBNLibro.getText().isBlank()) {
                    libroRAux = domLR.consultaId(Integer.parseInt(textISBNLibro.getText()));
                    
                    if (libroRAux == null) {
                        JOptionPane.showMessageDialog(null, "EL ISBN DEL LIBRO NO SE HA ENCONTRADO",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                }
                recetaIn = domR.consultaId(id);
                if (recetaIn != null) {
                    recetaAux = putData(recetaAux);
                    if (domR.modificar(recetaIn, recetaAux)) {
                        JOptionPane.showMessageDialog(null, "ACTUALIZACIÓN DE LA RECETA CORRECTA",
                                "OK", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "ERROR EN LA ACTUALIZACIÓN",
                                "ERROR", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "EL ID DE LA RECETA A ACTUALIZAR NO SE HA ENCONTRADO",
                            "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecetaUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecetaUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecetaUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecetaUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RecetaUpdate().setVisible(true);
            }
        });
    }

    private Receta putData(Receta receta) {
        receta = new Receta(Integer.parseInt(textId.getText()), textName.getText());
        receta.setVegana(isVegana.isSelected());
        if(textISBNLibro.getText().isBlank()){
            receta.setIdLibro(0);
        }else{
            receta.setIdLibro(Integer.parseInt(textISBNLibro.getText()));
        }

        if (!textDate.getText().isEmpty()) {
            try {
                Date d = sdf.parse(textDate.getText());
                receta.setFechInvención(d);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "FECHA MAL PUESTA\nFormato: dd/mm/yyyy",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        }
        return receta;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JToggleButton isVegana;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel textBusqueda;
    private javax.swing.JTextField textDate;
    private javax.swing.JTextField textISBNLibro;
    private javax.swing.JTextField textId;
    private javax.swing.JTextField textName;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
